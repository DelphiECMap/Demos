unit UDrawPath;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.uecNativeMapControl, FMX.Controls.Presentation, FMX.StdCtrls, FMX.ListBox,
  FMX.Colors,FMX.uecNativeShape, FMX.uecMapUtil;

type
  TForm7 = class(TForm)
    map: TECNativeMap;
    Active_deactive: TButton;
    AddPoint: TButton;
    Validate: TButton;
    Undo: TButton;
    guidance: TComboBox;
    ColorPathLine: TColorComboBox;
    procedure Active_deactiveClick(Sender: TObject);
    procedure AddPointClick(Sender: TObject);
    procedure ValidateClick(Sender: TObject);
    procedure UndoClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure guidanceChange(Sender: TObject);
    procedure ColorPathLineChange(Sender: TObject);
  private
    { Déclarations privées }
    procedure doOnReady(const Ready:boolean);
    procedure doOnActivate(const Activate:boolean);
  public
    { Déclarations publiques }
  end;

var
  Form7: TForm7;

implementation

{$R *.fmx}

procedure  TForm7.doOnReady(const Ready:boolean);
begin
 Validate.Enabled := Ready and map.DrawPath.activate;
 Undo.Enabled     := Ready and map.DrawPath.isUndo;
end;

procedure TForm7.doOnActivate(const Activate:boolean);
begin
 AddPoint.Enabled := Activate;
 Guidance.Enabled := Activate;

 if Activate then
 begin
  Active_deactive.Text := 'Deactivate'  ;
  Guidance.ItemIndex := integer(map.DrawPath.PathType);
 end
 else
   Active_deactive.Text := 'Activate'


end;

procedure TForm7.FormCreate(Sender: TObject);
var color:TAlphaColor;
begin
  map.DrawPath.OnReady    := doOnReady ;
  map.DrawPath.OnActivate := doOnActivate ;
  map.DrawPath.Activate   := false;

  TAlphaColorRec(Color).R := 98;
  TAlphaColorRec(Color).G := 188;
  TAlphaColorRec(Color).B := 255;
  TAlphaColorRec(Color).A := 255;

  ColorPathLine.Color := Color;

end;

procedure TForm7.guidanceChange(Sender: TObject);
begin
 map.DrawPath.PathType := TECDrawPathType(guidance.ItemIndex);
end;

procedure TForm7.UndoClick(Sender: TObject);
begin
 map.DrawPath.Undo;
end;

procedure TForm7.ValidateClick(Sender: TObject);
// add unit uecNativeShape
var line : TECShapeLine;
begin
 line := map.shapes.AddLine ;

 if ColorPathLine.Color<>0 then
   line.Color := ColorPathLine.Color ;

 map.DrawPath.ValidPath(line) ;
end;

procedure TForm7.Active_deactiveClick(Sender: TObject);
begin
 map.DrawPath.activate := not map.DrawPath.activate;
end;

procedure TForm7.AddPointClick(Sender: TObject);
begin
 map.DrawPath.AddPoint;
end;



procedure TForm7.ColorPathLineChange(Sender: TObject);
begin
 // style for path line
 // add unit uecMapUtil for use ColorToHTML
  Map.Styles.addRule('#' + map.DrawPath.Name + '.line {color:'+ColorToHTML(ColorPathLine.Color)+'}');
end;

end.
